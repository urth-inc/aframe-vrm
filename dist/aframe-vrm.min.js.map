{
  "version": 3,
  "sources": ["../src/vrm/lookat.ts", "../src/vrm/blendshape.ts", "../src/vrm/firstperson.ts", "../src/vrm/avatar.ts", "../src/utils/physics-cannon.ts", "../src/utils/simpleik.ts", "../src/utils/vmd.ts", "../src/utils/bvh.ts", "../src/aframe-vrm.js"],
  "sourcesContent": ["export class VRMLookAt implements VRMModule {\n    public target: THREE.Object3D | null = null;\n    public angleLimit: number = 60 * Math.PI / 180;\n    private readonly _bone: THREE.Object3D;\n    private readonly _identQ = new THREE.Quaternion();\n    private readonly _zV = new THREE.Vector3(0, 0, -1);\n    private readonly _tmpQ0 = new THREE.Quaternion();\n    private readonly _tmpV0 = new THREE.Vector3();\n\n    constructor(initCtx: InitCtx) {\n        this._bone = initCtx.nodes[initCtx.vrm.firstPerson.firstPersonBone];\n    }\n\n    public update(t: number): void {\n        let target = this.target;\n        let bone = this._bone;\n        if (target == null || bone == null) {\n            return;\n        }\n        let targetDirection = bone.worldToLocal(this._tmpV0.setFromMatrixPosition(target.matrixWorld)).normalize();\n        let rot = this._tmpQ0.setFromUnitVectors(this._zV, targetDirection);\n        let boneLimit = this.angleLimit;\n        let speedFactor = 0.08;\n        let angle = 2 * Math.acos(rot.w);\n        if (angle > boneLimit * 1.5) {\n            rot = this._identQ;\n            speedFactor = 0.04;\n        } else if (angle > boneLimit) {\n            rot.setFromAxisAngle(this._tmpV0.set(rot.x, rot.y, rot.z).normalize(), boneLimit);\n        }\n        bone.quaternion.slerp(rot, speedFactor);\n    }\n}\n", "import { VRMAvatar } from \"./avatar\" // TODO: remove circular dependency\n\nexport class VRMBlendShapeUtil {\n    private readonly _avatar: VRMAvatar;\n    private _currentShape: any = {};\n    private animatedMorph: any;\n    private morphAction: any;\n\n    constructor(avatar: VRMAvatar) {\n        this._avatar = avatar;\n    }\n\n    public setBlendShapeWeight(name: string, value: number): void {\n        this._currentShape[name] = value;\n        if (value == 0) {\n            delete this._currentShape[name];\n        }\n        this._updateBlendShape()\n    }\n\n    public getBlendShapeWeight(name: string): number {\n        return this._currentShape[name] || 0;\n    }\n\n    public resetBlendShape() {\n        this._currentShape = {};\n        this._updateBlendShape();\n    }\n\n    public startBlink(blinkInterval: number): void {\n        if (this.animatedMorph) {\n            return;\n        }\n        this.animatedMorph = {\n            name: 'BLINK',\n            times: [0, blinkInterval - 0.2, blinkInterval - 0.1, blinkInterval],\n            values: [0, 0, 1, 0]\n        };\n        this._updateBlendShape();\n    }\n\n    public stopBlink(): void {\n        this.animatedMorph = null;\n        this._updateBlendShape();\n    }\n\n    private _updateBlendShape(): void {\n        // TODO: refactoring. use THREE.AnimationBlendMode.\n        let addWeights = (data: Record<string, any>, name: string, weights: number[]) => {\n            let blend = this._avatar.blendShapes[name];\n            blend && blend.binds.forEach(bind => {\n                let tname = bind.target.name;\n                let values = data[tname] || (data[tname] = new Array(bind.target.morphTargetInfluences.length * weights.length).fill(0));\n                for (let t = 0; t < weights.length; t++) {\n                    let i = t * bind.target.morphTargetInfluences.length + bind.index;\n                    values[i] += Math.max(bind.weight * weights[t], values[i]); // blend func : max\n                }\n            });\n        };\n        let times = [0], trackdata: Record<string, any[]> = {};\n        if (this.animatedMorph) {\n            times = this.animatedMorph.times;\n            addWeights(trackdata, this.animatedMorph.name, this.animatedMorph.values);\n        }\n        for (let [name, value] of Object.entries(this._currentShape)) {\n            if (this._avatar.blendShapes[name]) {\n                addWeights(trackdata, name, new Array(times.length).fill(value));\n            }\n        }\n        let tracks = Object.entries(trackdata).map(([tname, values]) =>\n            new THREE.NumberKeyframeTrack(tname + '.morphTargetInfluences', times, values));\n        let nextAction = null;\n        if (tracks.length > 0) {\n            let clip = new THREE.AnimationClip('morph', undefined, tracks);\n            nextAction = this._avatar.mixer.clipAction(clip).setEffectiveWeight(1.0).play();\n        }\n        this.morphAction && this.morphAction.stop();\n        this.morphAction = nextAction;\n    }\n}\n", "\nexport class FirstPersonMeshUtil {\n    private readonly _firstPersonBone: THREE.Bone;\n    private readonly _annotatedMeshes: { flag: string, mesh: THREE.SkinnedMesh }[]\n    constructor(initCtx: InitCtx) {\n        this._firstPersonBone = initCtx.nodes[initCtx.vrm.firstPerson.firstPersonBone] as THREE.Bone;\n        this._annotatedMeshes =\n            initCtx.vrm.firstPerson.meshAnnotations.map(ma => ({ flag: ma.firstPersonFlag, mesh: initCtx.meshes[ma.mesh] }));\n    }\n    public setFirstPerson(firstPerson: boolean): void {\n        this._annotatedMeshes.forEach(a => {\n            if (a.flag == 'ThirdPersonOnly') {\n                a.mesh.visible = !firstPerson;\n            } else if (a.flag == 'FirstPersonOnly') {\n                a.mesh.visible = firstPerson;\n            } else if (a.flag == 'Auto' && this._firstPersonBone) {\n                if (firstPerson) {\n                    this._genFirstPersonMesh(a.mesh);\n                } else {\n                    this._resetFirstPersonMesh(a.mesh);\n                }\n            }\n        });\n    }\n    private _genFirstPersonMesh(mesh: THREE.SkinnedMesh): void {\n        mesh.children.forEach(c => this._genFirstPersonMesh(c as THREE.SkinnedMesh));\n        if (!mesh.isSkinnedMesh) {\n            return;\n        }\n        let firstPersonBones: Record<string, boolean> = {};\n        this._firstPersonBone.traverse(b => {\n            firstPersonBones[b.uuid] = true;\n        });\n        let skeletonBones = mesh.skeleton.bones;\n        let skinIndex = mesh.geometry.attributes.skinIndex;\n        let skinWeight = mesh.geometry.attributes.skinWeight;\n        let index = mesh.geometry.index!;\n        let vertexErase = [];\n        let vcount = 0, fcount = 0;\n        for (let i = 0; i < skinIndex.array.length; i++) {\n            let b = skinIndex.array[i];\n            if (skinWeight.array[i] > 0 && firstPersonBones[skeletonBones[b].uuid]) {\n                if (!vertexErase[i / skinIndex.itemSize | 0]) {\n                    vcount++;\n                    vertexErase[i / skinIndex.itemSize | 0] = true;\n                }\n            }\n        }\n        let trinagleErase = [];\n        for (let i = 0; i < index.count; i++) {\n            if (vertexErase[index.array[i]] && !trinagleErase[i / 3 | 0]) {\n                trinagleErase[i / 3 | 0] = true;\n                fcount++;\n            }\n        }\n        if (fcount == 0) {\n            return;\n        } else if (fcount * 3 == index.count) {\n            mesh.visible = false;\n            return;\n        }\n        // TODO: erase triangle.\n    }\n    private _resetFirstPersonMesh(mesh: THREE.SkinnedMesh): void {\n        mesh.children.forEach(c => this._resetFirstPersonMesh(c as THREE.SkinnedMesh));\n        mesh.visible = true;\n    }\n}\n", "import { VRMLookAt } from \"./lookat\"\nimport { VRMBlendShapeUtil } from \"./blendshape\"\nimport { FirstPersonMeshUtil } from \"./firstperson\"\nimport { GLTFLoader, GLTF } from \"three/examples/jsm/loaders/GLTFLoader\" // type only\n\nexport type PoseData = { bones: any[], blendShape?: any[] }\nexport class VRMLoader {\n    private readonly gltfLoader: GLTFLoader;\n    constructor(gltfLoader?: any) {\n        // @ts-ignore\n        this.gltfLoader = gltfLoader || new THREE.GLTFLoader(THREE.DefaultLoadingManager);\n    }\n    public async load(url: string, moduleSpecs: ModuleSpec[] = []): Promise<VRMAvatar> {\n        return new Promise((resolve, reject) => {\n            this.gltfLoader.load(url, async (gltf) => {\n                resolve(await new VRMAvatar(gltf).init(gltf, moduleSpecs));\n            }, undefined, reject);\n        });\n    }\n}\n\nexport class VRMAvatar {\n    public readonly model: THREE.Object3D & { skeleton?: THREE.Skeleton };\n    public readonly mixer: THREE.AnimationMixer;\n    public readonly bones: Record<string, THREE.Bone> = {};\n    public blendShapes: Record<string, { name: string, binds: Record<string, any>[] }> = {};\n    public readonly modules: Record<string, VRMModule> = {};\n    public meta: Record<string, any> = {};\n    public readonly isVRM: boolean;\n    public readonly animations: THREE.AnimationClip[];\n    public firstPersonBone: THREE.Bone | null = null;\n\n    private _firstPersonMeshUtil: FirstPersonMeshUtil | null = null;\n    private _blendShapeUtil: VRMBlendShapeUtil;\n\n    // TODO: move to another component.\n    public boneConstraints = {\n        'head': { type: 'ball', limit: 60 * Math.PI / 180, twistAxis: new THREE.Vector3(0, 1, 0), twistLimit: 60 * Math.PI / 180 },\n        'neck': { type: 'ball', limit: 30 * Math.PI / 180, twistAxis: new THREE.Vector3(0, 1, 0), twistLimit: 10 * Math.PI / 180 },\n        'leftUpperLeg': { type: 'ball', limit: 170 * Math.PI / 180, twistAxis: new THREE.Vector3(0, -1, 0), twistLimit: Math.PI / 2 },\n        'rightUpperLeg': { type: 'ball', limit: 170 * Math.PI / 180, twistAxis: new THREE.Vector3(0, -1, 0), twistLimit: Math.PI / 2 },\n        'leftLowerLeg': { type: 'hinge', axis: new THREE.Vector3(1, 0, 0), min: -170 * Math.PI / 180, max: 0 * Math.PI / 180 },\n        'rightLowerLeg': { type: 'hinge', axis: new THREE.Vector3(1, 0, 0), min: -170 * Math.PI / 180, max: 0 * Math.PI / 180 }\n    };\n\n    constructor(gltf: GLTF) {\n        this.model = gltf.scene;\n        this.mixer = new THREE.AnimationMixer(this.model);\n        this.isVRM = (gltf.userData.gltfExtensions || {}).VRM != null;\n        this.animations = gltf.animations || [];\n        this._blendShapeUtil = new VRMBlendShapeUtil(this);\n    }\n\n    public async init(gltf: GLTF, moduleSpecs: ModuleSpec[]) {\n        if (!this.isVRM) {\n            return this;\n        }\n        let vrmExt = gltf.userData.gltfExtensions.VRM as VRMExtension;\n        let bones = this.bones;\n        let nodes = await gltf.parser.getDependencies('node');\n        let meshes = await gltf.parser.getDependencies('mesh');\n        let initCtx = { nodes: nodes, meshes: meshes, vrm: vrmExt, gltf: gltf };\n\n        this.meta = vrmExt.meta;\n        Object.values(vrmExt.humanoid.humanBones).forEach((humanBone) => {\n            bones[humanBone.bone] = nodes[humanBone.node];\n        });\n        if (vrmExt.firstPerson) {\n            if (vrmExt.firstPerson.firstPersonBone) {\n                this.firstPersonBone = nodes[vrmExt.firstPerson.firstPersonBone];\n                this.modules.lookat = new VRMLookAt(initCtx);\n            }\n            if (vrmExt.firstPerson.meshAnnotations) {\n                this._firstPersonMeshUtil = new FirstPersonMeshUtil(initCtx);\n            }\n        }\n        this.model.skeleton = new THREE.Skeleton(Object.values(bones));\n        this._fixBoundingBox();\n        if (vrmExt.blendShapeMaster) {\n            this._initBlendShapes(initCtx);\n        }\n\n        for (let spec of moduleSpecs) {\n            let mod = spec.instantiate(this, initCtx);\n            if (mod) {\n                this.modules[spec.name] = mod;\n            }\n        }\n        return this;\n    }\n    private _initBlendShapes(ctx: InitCtx): void {\n        this.blendShapes = (ctx.vrm.blendShapeMaster.blendShapeGroups || []).reduce((blendShapes: Record<string, any>, bg) => {\n            let binds = bg.binds.flatMap(bind => {\n                let meshObj = ctx.meshes[bind.mesh];\n                return (meshObj.isSkinnedMesh ? [meshObj] : meshObj.children.filter(obj => (<THREE.SkinnedMesh>obj).isSkinnedMesh))\n                    .map(obj => ({ target: obj, index: bind.index, weight: bind.weight / 100 }));\n            });\n            blendShapes[(bg.presetName || bg.name).toUpperCase()] = { name: bg.name, binds: binds };\n            return blendShapes;\n        }, {});\n    }\n    private _fixBoundingBox(): void {\n        let bones = this.bones;\n        if (!bones.hips) {\n            return;\n        }\n        // Extends bounding box.\n        let tmpV = new THREE.Vector3();\n        let center = bones.hips.getWorldPosition(tmpV).clone();\n        this.model.traverse((obj) => {\n            let mesh = <THREE.SkinnedMesh>obj;\n            if (mesh.isSkinnedMesh) {\n                let pos = mesh.getWorldPosition(tmpV).sub(center).multiplyScalar(-1);\n                let r = (pos.clone().sub(mesh.geometry.boundingSphere!.center).length() + mesh.geometry.boundingSphere!.radius);\n                mesh.geometry.boundingSphere!.center.copy(pos);\n                mesh.geometry.boundingSphere!.radius = r;\n                mesh.geometry.boundingBox!.min.set(pos.x - r, pos.y - r, pos.z - r);\n                mesh.geometry.boundingBox!.max.set(pos.x + r, pos.y + r, pos.z + r);\n            }\n        });\n    }\n    public update(timeDelta: number): void {\n        this.mixer.update(timeDelta);\n        for (let m of Object.values(this.modules)) {\n            m.update(timeDelta);\n        }\n    }\n    public setModule(name: string, module: VRMModule): void {\n        this.removeModule(name);\n        this.modules[name] = module;\n    }\n    public removeModule(name: string): void {\n        let module = this.modules[name];\n        module && module.dispose && module.dispose();\n        delete this.modules[name];\n    }\n    public dispose(): void {\n        for (let m of Object.keys(this.modules)) {\n            this.removeModule(m);\n        }\n        this.model.traverse((obj) => {\n            let mesh = obj as THREE.Mesh;\n            if (mesh.isMesh) {\n                mesh.geometry.dispose();\n                (mesh.material as THREE.MeshBasicMaterial).map?.dispose();\n            }\n            // @ts-ignore\n            obj.skeleton && obj.skeleton.dispose();\n        });\n    }\n\n    // Util functions.\n    get lookAtTarget(): THREE.Object3D | null {\n        let lookat = this.modules.lookat as VRMLookAt | null;\n        return lookat ? lookat.target : null;\n    }\n    set lookAtTarget(v: THREE.Object3D) {\n        let lookat = this.modules.lookat as VRMLookAt | null;\n        if (lookat) {\n            lookat.target = v;\n        }\n    }\n    public setBlendShapeWeight(name: string, value: number): void {\n        this._blendShapeUtil.setBlendShapeWeight(name, value);\n    }\n    public getBlendShapeWeight(name: string): number {\n        return this._blendShapeUtil.getBlendShapeWeight(name);\n    }\n    public resetBlendShape(): void {\n        this._blendShapeUtil.resetBlendShape();\n    }\n    public startBlink(blinkInterval: number): void {\n        this._blendShapeUtil.startBlink(blinkInterval);\n    }\n    public stopBlink(): void {\n        this._blendShapeUtil.stopBlink();\n    }\n    public getPose(exportMorph: boolean): PoseData {\n        let poseData: PoseData = {\n            bones: Object.keys(this.bones).map((name) =>\n                ({ name: name, q: this.bones[name].quaternion.toArray() })\n            )\n        }\n        if (exportMorph) {\n            poseData.blendShape = Object.keys(this.blendShapes).map((name) =>\n                ({ name: name, value: this.getBlendShapeWeight(name) })\n            );\n        }\n        return poseData\n    }\n    public setPose(pose: PoseData): void {\n        if (pose.bones) {\n            for (let boneParam of pose.bones) {\n                if (this.bones[boneParam.name]) {\n                    this.bones[boneParam.name].quaternion.fromArray(boneParam.q);\n                }\n            }\n        }\n        if (pose.blendShape) {\n            for (let morph of pose.blendShape) {\n                this.setBlendShapeWeight(morph.name, morph.value)\n            }\n        }\n    }\n    public restPose(): void {\n        for (let b of Object.values(this.bones)) {\n            b.quaternion.set(0, 0, 0, 1);\n        }\n    }\n    public setFirstPerson(firstPerson: boolean): void {\n        if (this._firstPersonMeshUtil) {\n            this._firstPersonMeshUtil.setFirstPerson(firstPerson);\n        }\n    }\n}\n", "export class VRMPhysicsCannonJS implements VRMModule {\n    collisionGroup = 2;\n    enable = false;\n    binds: [THREE.Object3D, CANNON.Body][] = [];\n    fixedBinds: [THREE.Object3D, CANNON.Body][] = [];\n    bodies: CANNON.Body[] = [];\n    constraints: any[] = [];\n    private readonly _tmpQ0 = new THREE.Quaternion();\n    private readonly _tmpV0 = new THREE.Vector3();\n    private readonly _tmpV1 = new THREE.Vector3();\n    springBoneSystem: any;\n    world: CANNON.World | null = null;\n    internalWorld: boolean = false;\n    constructor(initctx: InitCtx) {\n        this.springBoneSystem = this._springBoneSystem();\n        this._init(initctx);\n    }\n    private _init(initctx: InitCtx): void {\n        if (!initctx.vrm.secondaryAnimation) {\n            return;\n        }\n        let nodes = initctx.nodes;\n        let secondaryAnimation = initctx.vrm.secondaryAnimation;\n        let allColliderGroupsMask = 0;\n        let colliderMarginFactor = 0.9; // TODO: Remove this.\n        (secondaryAnimation.colliderGroups || []).forEach((cc, i) => {\n            let node = nodes[cc.node];\n            for (let collider of cc.colliders) {\n                let body = new CANNON.Body({ mass: 0, collisionFilterGroup: 1 << (this.collisionGroup + i + 1), collisionFilterMask: -1 });\n                body.addShape(new CANNON.Sphere(collider.radius * colliderMarginFactor), collider.offset);\n                this.bodies.push(body);\n                this.fixedBinds.push([node, body]);\n                allColliderGroupsMask |= body.collisionFilterGroup;\n            }\n        });\n        for (let bg of secondaryAnimation.boneGroups || []) {\n            let gravity = new CANNON.Vec3().copy(bg.gravityDir || { x: 0, y: -1, z: 0 }).scale(bg.gravityPower || 0);\n            let radius = bg.hitRadius || 0.05;\n            let collisionFilterMask = ~(this.collisionGroup | allColliderGroupsMask);\n            for (let g of bg.colliderGroups || []) {\n                collisionFilterMask |= 1 << (this.collisionGroup + g + 1);\n            }\n            for (let b of bg.bones) {\n                let root = new CANNON.Body({ mass: 0, collisionFilterGroup: 0, collisionFilterMask: 0 });\n                root.position.copy(nodes[b].parent.getWorldPosition(this._tmpV0));\n                this.bodies.push(root);\n                this.fixedBinds.push([nodes[b].parent, root]);\n                let add = (parentBody: CANNON.Body, node: THREE.Object3D) => {\n                    let c = node.getWorldPosition(this._tmpV0);\n                    let wpos = c.clone(); // TODO\n                    let n = node.children.length + 1;\n                    if (node.children.length > 0) {\n                        node.children.forEach(n => {\n                            c.add(n.getWorldPosition(this._tmpV1));\n                        });\n                    } else {\n                        c.add(node.parent!.getWorldPosition(this._tmpV1).sub(c).normalize().multiplyScalar(-0.1).add(c));\n                        n = 2;\n                    }\n                    c.multiplyScalar(1 / n);\n\n                    let body = new CANNON.Body({\n                        mass: 0.5,\n                        linearDamping: Math.max(bg.dragForce || 0, 0.0001),\n                        angularDamping: Math.max(bg.dragForce || 0, 0.0001),\n                        collisionFilterGroup: this.collisionGroup,\n                        collisionFilterMask: collisionFilterMask,\n                        position: new CANNON.Vec3().copy(c),\n                    });\n                    body.addShape(new CANNON.Sphere(radius));\n                    this.bodies.push(body);\n\n                    let o = new CANNON.Vec3().copy(this._tmpV1.copy(wpos).sub(c));\n                    let d = new CANNON.Vec3().copy(wpos.sub(parentBody.position));\n                    let joint = new CANNON.PointToPointConstraint(body, o, parentBody, d);\n                    this.constraints.push(joint);\n\n                    let l = body.position.distanceTo(parentBody.position);\n                    this.binds.push([node, body]);\n                    this.springBoneSystem.objects.push({ body: body, parentBody: parentBody, force: gravity, boneGroup: bg, size: radius, distanceToParent: l });\n                    node.children.forEach(n => (n as THREE.Bone).isBone && add(body, n));\n                };\n                add(root, nodes[b]);\n            }\n        }\n    }\n    private _springBoneSystem() {\n        let _q0 = new CANNON.Quaternion();\n        let _q1 = new CANNON.Quaternion();\n        let _v0 = new CANNON.Vec3();\n        return {\n            world: null as CANNON.World | null,\n            objects: [] as any[],\n            update() {\n                let g = this.world!.gravity, dt = this.world!.dt;\n                let avlimit = 0.1;\n                let stiffnessScale = 1600;\n                for (let b of this.objects) {\n                    let body = b.body as CANNON.Body, parent = b.parentBody;\n                    // Cancel world.gravity and apply boneGroup.gravity.\n                    let f = body.force, m = body.mass, g2 = b.force;\n                    f.x += m * (-g.x + g2.x);\n                    f.y += m * (-g.y + g2.y);\n                    f.z += m * (-g.z + g2.z);\n\n                    // Fix body position\n                    let d = body.position.distanceTo(parent.position);\n                    if (Math.abs(d - b.distanceToParent) > 0.01 && d > 0) {\n                        parent.position.lerp(body.position, b.distanceToParent / d, body.position);\n                    }\n\n                    // angularVelocity limitation\n                    let av = body.angularVelocity.length();\n                    if (av > avlimit) {\n                        body.angularVelocity.scale(avlimit / av, body.angularVelocity);\n                    }\n\n                    // apply spring(?) force.\n                    let approxInertia = b.size * b.size * m;\n                    let rot = body.quaternion.mult(parent.quaternion.inverse(_q0), _q1);\n                    let [axis, angle] = rot.toAxisAngle(_v0);\n                    angle = angle - Math.PI * 2 * Math.floor((angle + Math.PI) / (Math.PI * 2));\n                    let tf = angle * b.boneGroup.stiffiness * stiffnessScale; // stiff'i'ness\n                    if (Math.abs(tf) > Math.abs(angle / dt / dt * 0.5)) {\n                        tf = angle / dt / dt * 0.5;\n                    }\n                    let af = axis.scale(-tf * approxInertia, axis);\n                    body.torque.vadd(af, body.torque);\n                }\n            }\n        };\n    }\n    public attach(world: CANNON.World | null): void {\n        this.detach();\n        this.internalWorld = world == null;\n        this.world = world || new CANNON.World();\n        this.springBoneSystem.world = this.world;\n        this.world.subsystems.push(this.springBoneSystem);\n        this.bodies.forEach(b => this.world!.addBody(b));\n        this.constraints.forEach(c => this.world!.addConstraint(c));\n        this.reset();\n        this.enable = true;\n        // HACK: update collision mask.\n        this.world.bodies.forEach(b => {\n            if (b.collisionFilterGroup == 1 && b.collisionFilterMask == 1) {\n                b.collisionFilterMask = -1;\n            }\n        });\n    }\n    public detach(): void {\n        if (!this.world) {\n            return;\n        }\n        this.world.subsystems = this.world.subsystems.filter(s => s != this.springBoneSystem);\n        this.world.constraints = this.world.constraints.filter(c => !this.constraints.includes(c));\n        this.world.bodies = this.world.bodies.filter(b => !this.bodies.includes(b));\n        this.world = null;\n        this.enable = false;\n    }\n    public reset(): void {\n        this.fixedBinds.forEach(([node, body]) => {\n            node.updateWorldMatrix(true, false);\n            body.position.copy(node.getWorldPosition(this._tmpV0));\n            body.quaternion.copy(node.parent!.getWorldQuaternion(this._tmpQ0));\n        });\n        this.binds.forEach(([node, body]) => {\n            node.updateWorldMatrix(true, false);\n            body.position.copy(node.getWorldPosition(this._tmpV0));\n            body.quaternion.copy(node.getWorldQuaternion(this._tmpQ0));\n        });\n    }\n    public update(timeDelta: number): void {\n        if (!this.enable) {\n            return;\n        }\n        this.fixedBinds.forEach(([node, body]) => {\n            body.position.copy(node.getWorldPosition(this._tmpV0));\n            body.quaternion.copy(node.getWorldQuaternion(this._tmpQ0));\n        });\n        if (this.internalWorld) {\n            this.world!.step(1 / 60, timeDelta);\n        }\n        this.binds.forEach(([node, body]) => {\n            node.quaternion.copy(body.quaternion).premultiply(node.parent!.getWorldQuaternion(this._tmpQ0).invert());\n        });\n    }\n    public dispose(): void {\n        this.detach();\n    }\n}\n", "\nexport class IKNode {\n    position: THREE.Vector3;\n    constraint: { [key: string]: any };\n    userData: any;\n\n    quaternion = new THREE.Quaternion();\n    worldMatrix = new THREE.Matrix4();\n    worldPosition = new THREE.Vector3();\n\n    constructor(position: THREE.Vector3, constraint: { [key: string]: any }, userData: any) {\n        this.position = position;\n        this.constraint = constraint;\n        this.userData = userData;\n    }\n}\nexport class IKSolver {\n    iterationLimit = 50;\n    thresholdSq = 0.0001;\n    _iv = new THREE.Vector3(1, 1, 1);\n    _tmpV0 = new THREE.Vector3();\n    _tmpV1 = new THREE.Vector3();\n    _tmpV2 = new THREE.Vector3();\n    _tmpQ0 = new THREE.Quaternion();\n    _tmpQ1 = new THREE.Quaternion();\n\n    _updateChain(bones: IKNode[], parentMat: THREE.Matrix4) {\n        for (let bone of bones) {\n            bone.worldMatrix.compose(bone.position, bone.quaternion, this._iv).premultiply(parentMat);\n            bone.worldPosition.setFromMatrixPosition(bone.worldMatrix);\n            parentMat = bone.worldMatrix;\n        }\n    }\n    solve(bones: IKNode[], target: THREE.Vector3, boneSpaceMat: THREE.Matrix4) {\n        this._updateChain(bones, boneSpaceMat);\n        let endPosition = bones[bones.length - 1].worldPosition;\n        let startDistance = endPosition.distanceToSquared(target);\n        let targetDir = this._tmpV2;\n        let endDir = this._tmpV1;\n        let rotation = this._tmpQ1;\n        for (let i = 0; i < this.iterationLimit; i++) {\n            if (endPosition.distanceToSquared(target) < this.thresholdSq) {\n                break;\n            }\n            let currentTarget = this._tmpV0.copy(target);\n            for (let j = bones.length - 2; j >= 0; j--) {\n                let bone = bones[j];\n                let endPos = bones[j + 1].position;\n                bone.worldMatrix.decompose(this._tmpV1, this._tmpQ0, this._tmpV2);\n                targetDir.copy(currentTarget).sub(this._tmpV1).applyQuaternion(rotation.copy(this._tmpQ0).invert()).normalize();\n                endDir.copy(endPos).normalize();\n                rotation.setFromUnitVectors(endDir, targetDir);\n                bone.quaternion.multiply(rotation);\n                let v = endDir.copy(endPos).applyQuaternion(this._tmpQ0.multiply(rotation));\n                if (bone.constraint) {\n                    rotation.copy(bone.quaternion).invert();\n                    if (bone.constraint.apply(bone)) {\n                        // TODO\n                        rotation.premultiply(bone.quaternion);\n                        v.copy(endPos).applyQuaternion(this._tmpQ0.multiply(rotation));\n                    }\n                }\n                currentTarget.sub(v);\n            }\n            this._updateChain(bones, boneSpaceMat);\n        }\n        return endPosition.distanceToSquared(target) < startDistance;\n    }\n}\n\n\nexport class SimpleIK {\n    solver = new IKSolver();\n    chains: any[];\n    update(t : number) {\n\n    }\n}\n", "import { VRMAvatar } from \"../vrm/avatar\"\nimport { MMDLoader } from \"three/examples/jsm/loaders/MMDLoader.js\"\nimport { CCDIKSolver } from \"three/examples/jsm/animation/CCDIKSolver.js\"\n\nexport class VMDLoaderWrapper {\n    boneMapping: { bone: string, nodeNames: string[] }[] = [\n        { \"bone\": \"hips\", \"nodeNames\": [\"\u30BB\u30F3\u30BF\u30FC\", \"center\"] },\n        { \"bone\": \"spine\", \"nodeNames\": [\"\u4E0A\u534A\u8EAB\", \"upper body\"] },\n        { \"bone\": \"chest\", \"nodeNames\": [\"\u4E0A\u534A\u8EAB2\", \"upper body2\"] },\n        { \"bone\": \"neck\", \"nodeNames\": [\"\u9996\", \"neck\"] },\n        { \"bone\": \"head\", \"nodeNames\": [\"\u982D\", \"head\"] },\n        { \"bone\": \"leftShoulder\", \"nodeNames\": [\"\u5DE6\u80A9\", \"shoulder_L\"] },\n        { \"bone\": \"leftUpperArm\", \"nodeNames\": [\"\u5DE6\u8155\", \"arm_L\"] },\n        { \"bone\": \"leftLowerArm\", \"nodeNames\": [\"\u5DE6\u3072\u3058\", \"elbow_L\"] },\n        { \"bone\": \"leftHand\", \"nodeNames\": [\"\u5DE6\u624B\u9996\", \"wrist_L\"] },\n        { \"bone\": \"rightShoulder\", \"nodeNames\": [\"\u53F3\u80A9\", \"shoulder_R\"] },\n        { \"bone\": \"rightUpperArm\", \"nodeNames\": [\"\u53F3\u8155\", \"arm_R\"] },\n        { \"bone\": \"rightLowerArm\", \"nodeNames\": [\"\u53F3\u3072\u3058\", \"elbow_R\"] },\n        { \"bone\": \"rightHand\", \"nodeNames\": [\"\u53F3\u624B\u9996\", \"wrist_R\"] },\n        { \"bone\": \"leftUpperLeg\", \"nodeNames\": [\"\u5DE6\u8DB3\", \"leg_L\"] },\n        { \"bone\": \"leftLowerLeg\", \"nodeNames\": [\"\u5DE6\u3072\u3056\", \"knee_L\"] },\n        { \"bone\": \"leftFoot\", \"nodeNames\": [\"\u5DE6\u8DB3\u9996\", \"ankle_L\"] },\n        { \"bone\": \"leftToes\", \"nodeNames\": [\"\u5DE6\u3064\u307E\u5148\", \"L toe\"] },\n        { \"bone\": \"rightUpperLeg\", \"nodeNames\": [\"\u53F3\u8DB3\", \"leg_R\"] },\n        { \"bone\": \"rightLowerLeg\", \"nodeNames\": [\"\u53F3\u3072\u3056\", \"knee_R\"] },\n        { \"bone\": \"rightFoot\", \"nodeNames\": [\"\u53F3\u8DB3\u9996\", \"ankle_R\"] },\n        { \"bone\": \"rightToes\", \"nodeNames\": [\"\u53F3\u3064\u307E\u5148\", \"R toe\"] },\n        { \"bone\": \"leftEye\", \"nodeNames\": [\"\u5DE6\u76EE\", \"eye_L\"] },\n        { \"bone\": \"rightEye\", \"nodeNames\": [\"\u53F3\u76EE\", \"eye_R\"] },\n        { \"bone\": \"leftThumbProximal\", \"nodeNames\": [\"\u5DE6\u89AA\u6307\uFF10\", \"thumb0_L\"] },\n        { \"bone\": \"leftThumbIntermediate\", \"nodeNames\": [\"\u5DE6\u89AA\u6307\uFF11\", \"thumb1_L\"] },\n        { \"bone\": \"leftThumbDistal\", \"nodeNames\": [\"\u5DE6\u89AA\u6307\uFF12\", \"thumb2_L\"] },\n        { \"bone\": \"leftIndexProximal\", \"nodeNames\": [\"\u5DE6\u4EBA\u6307\uFF11\", \"fore1_L\"] },\n        { \"bone\": \"leftIndexIntermediate\", \"nodeNames\": [\"\u5DE6\u4EBA\u6307\uFF12\", \"fore2_L\"] },\n        { \"bone\": \"leftIndexDistal\", \"nodeNames\": [\"\u5DE6\u4EBA\u6307\uFF13\", \"fore3_L\"] },\n        { \"bone\": \"leftMiddleProximal\", \"nodeNames\": [\"\u5DE6\u4E2D\u6307\uFF11\", \"middle1_L\"] },\n        { \"bone\": \"leftMiddleIntermediate\", \"nodeNames\": [\"\u5DE6\u4E2D\u6307\uFF12\", \"middle2_L\"] },\n        { \"bone\": \"leftMiddleDistal\", \"nodeNames\": [\"\u5DE6\u4E2D\u6307\uFF13\", \"middle3_L\"] },\n        { \"bone\": \"leftRingProximal\", \"nodeNames\": [\"\u5DE6\u85AC\u6307\uFF11\", \"third1_L\"] },\n        { \"bone\": \"leftRingIntermediate\", \"nodeNames\": [\"\u5DE6\u85AC\u6307\uFF12\", \"third2_L\"] },\n        { \"bone\": \"leftRingDistal\", \"nodeNames\": [\"\u5DE6\u85AC\u6307\uFF13\", \"third3_L\"] },\n        { \"bone\": \"leftLittleProximal\", \"nodeNames\": [\"\u5DE6\u5C0F\u6307\uFF11\", \"little1_L\"] },\n        { \"bone\": \"leftLittleIntermediate\", \"nodeNames\": [\"\u5DE6\u5C0F\u6307\uFF12\", \"little2_L\"] },\n        { \"bone\": \"leftLittleDistal\", \"nodeNames\": [\"\u5DE6\u5C0F\u6307\uFF13\", \"little3_L\"] },\n        { \"bone\": \"rightThumbProximal\", \"nodeNames\": [\"\u53F3\u89AA\u6307\uFF10\", \"thumb0_R\"] },\n        { \"bone\": \"rightThumbIntermediate\", \"nodeNames\": [\"\u53F3\u89AA\u6307\uFF11\", \"thumb1_R\"] },\n        { \"bone\": \"rightThumbDistal\", \"nodeNames\": [\"\u53F3\u89AA\u6307\uFF12\", \"thumb2_R\"] },\n        { \"bone\": \"rightIndexProximal\", \"nodeNames\": [\"\u53F3\u4EBA\u6307\uFF11\", \"fore1_R\"] },\n        { \"bone\": \"rightIndexIntermediate\", \"nodeNames\": [\"\u53F3\u4EBA\u6307\uFF12\", \"fore2_R\"] },\n        { \"bone\": \"rightIndexDistal\", \"nodeNames\": [\"\u53F3\u4EBA\u6307\uFF13\", \"fore3_R\"] },\n        { \"bone\": \"rightMiddleProximal\", \"nodeNames\": [\"\u53F3\u4E2D\u6307\uFF11\", \"middle1_R\"] },\n        { \"bone\": \"rightMiddleIntermediate\", \"nodeNames\": [\"\u53F3\u4E2D\u6307\uFF12\", \"middle2_R\"] },\n        { \"bone\": \"rightMiddleDistal\", \"nodeNames\": [\"\u53F3\u4E2D\u6307\uFF13\", \"middle3_R\"] },\n        { \"bone\": \"rightRingProximal\", \"nodeNames\": [\"\u53F3\u85AC\u6307\uFF11\", \"third1_R\"] },\n        { \"bone\": \"rightRingIntermediate\", \"nodeNames\": [\"\u53F3\u85AC\u6307\uFF12\", \"third2_R\"] },\n        { \"bone\": \"rightRingDistal\", \"nodeNames\": [\"\u53F3\u85AC\u6307\uFF13\", \"third3_R\"] },\n        { \"bone\": \"rightLittleProximal\", \"nodeNames\": [\"\u53F3\u5C0F\u6307\uFF11\", \"little1_R\"] },\n        { \"bone\": \"rightLittleIntermediate\", \"nodeNames\": [\"\u53F3\u5C0F\u6307\uFF12\", \"little2_R\"] },\n        { \"bone\": \"rightLittleDistal\", \"nodeNames\": [\"\u53F3\u5C0F\u6307\uFF13\", \"little3_R\"] },\n    ];\n    blendShapeMap = {\n        \"A\": \"\u3042\",\n        \"I\": \"\u3044\",\n        \"U\": \"\u3046\",\n        \"E\": \"\u3048\",\n        \"O\": \"\u304A\",\n        \"BLINK\": \"\u307E\u3070\u305F\u304D\",\n    };\n    rotationOffsets = {\n        \"leftUpperArm\": -38 * THREE.MathUtils.DEG2RAD,\n        \"rightUpperArm\": 38 * THREE.MathUtils.DEG2RAD,\n    };\n    ikConfigs = [\n        { target: \"\u5DE6\u8DB3\uFF29\uFF2B\", bones: [`leftFoot`, 'leftLowerLeg', 'leftUpperLeg'] },\n        { target: \"\u53F3\u8DB3\uFF29\uFF2B\", bones: [`rightFoot`, 'rightLowerLeg', 'rightUpperLeg'] },\n        { target: \"\u5DE6\u3064\u307E\u5148\uFF29\uFF2B\", parent: 0, bones: [`leftToes`, `leftFoot`] },\n        { target: \"\u53F3\u3064\u307E\u5148\uFF29\uFF2B\", parent: 1, bones: [`rightToes`, `rightFoot`] },\n    ];\n    boneConstraints: Record<string, any> = {\n        'leftLowerLeg': { min: new THREE.Vector3(-175 * Math.PI / 180, 0, 0), max: new THREE.Vector3(0, 0, 0) },\n        'rightLowerLeg': { min: new THREE.Vector3(-175 * Math.PI / 180, 0, 0), max: new THREE.Vector3(0, 0, 0) },\n        'leftUpperLeg': { min: new THREE.Vector3(-Math.PI / 2, -Math.PI / 2, -Math.PI / 2), max: new THREE.Vector3(Math.PI, Math.PI / 2, Math.PI / 2) },\n        'rightUpperLeg': { min: new THREE.Vector3(-Math.PI / 2, -Math.PI / 2, -Math.PI / 2), max: new THREE.Vector3(Math.PI, Math.PI / 2, Math.PI / 2) },\n    };\n\n    async load(url: string, vrm: VRMAvatar, options: any): Promise<THREE.AnimationClip> {\n        let loader = new MMDLoader();\n\n        let nameMap: Record<string, string> = {};\n        for (let m of this.boneMapping) {\n            let boneObj = vrm.bones[m.bone];\n            if (boneObj) {\n                for (let name of m.nodeNames) {\n                    nameMap[name] = boneObj.name;\n                }\n            }\n        }\n        let rotationOffsets: Record<string, THREE.Quaternion> = {};\n        let boneTransforms: Record<string, [number, number]> = {};\n        for (let [name, r] of Object.entries(this.rotationOffsets)) {\n            let boneObj = vrm.bones[name];\n            if (boneObj) {\n                rotationOffsets[boneObj.name] = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 0, 1), r);\n                boneObj.traverse(o => {\n                    boneTransforms[o.name] = [Math.cos(r), Math.sin(r)]; // TODO matrix\n                });\n            }\n        }\n        let morphTargetDictionary: Record<string, string> = {};\n        for (let [name, morph] of Object.entries(this.blendShapeMap)) {\n            let b = vrm.blendShapes[name];\n            if (b) {\n                morphTargetDictionary[morph] = name;\n            }\n        }\n\n        /** @ts-ignore */\n        vrm.model.morphTargetDictionary = morphTargetDictionary;\n        let scale = 0.08; // MMD unit: 8cm\n        let rotY = (p: number[], t: number[]) => {\n            [p[0], p[2]] = [\n                p[0] * t[0] - p[2] * t[1],\n                p[0] * t[1] + p[2] * t[0]\n            ];\n        };\n        let rotZ = (p: number[], t: number[]) => {\n            [p[0], p[1]] = [\n                p[0] * t[0] - p[1] * t[1],\n                p[0] * t[1] + p[1] * t[0]\n            ];\n        };\n        let rot = new THREE.Quaternion();\n        let rot2 = new THREE.Quaternion();\n        return await new Promise((resolve, reject) => {\n            loader.loadVMD(url, async (vmd: { motions: any[] }) => {\n                // Cancel lower body rotation\n                let lowerBody = vmd.motions.filter(m => m.boneName == \"\u4E0B\u534A\u8EAB\");\n                if (lowerBody.length) {\n                    lowerBody.sort((a, b) => a.frameNum - b.frameNum);\n                    let update = (target: any[], inv: boolean) => {\n                        target.sort((a, b) => a.frameNum - b.frameNum);\n                        let i = 0;\n                        for (let m of target) {\n                            while (i < lowerBody.length - 1 && m.frameNum > lowerBody[i].frameNum) {\n                                i++;\n                            }\n                            let r = rot2.fromArray(lowerBody[i].rotation);\n                            if (i > 0 && m.frameNum < lowerBody[i].frameNum) {\n                                let t = (m.frameNum - lowerBody[i - 1].frameNum) / (lowerBody[i].frameNum - lowerBody[i - 1].frameNum);\n                                // TOOD: bezier interpolation.\n                                r.slerp(rot.fromArray(lowerBody[i - 1].rotation), 1 - t);\n                            }\n                            if (inv) r.invert();\n                            m.rotation = rot.fromArray(m.rotation).multiply(r).toArray();\n                        }\n                    };\n                    update(vmd.motions.filter(m => m.boneName == \"\u30BB\u30F3\u30BF\u30FC\"), false);\n                    update(vmd.motions.filter(m => m.boneName == \"\u4E0A\u534A\u8EAB\"), true);\n                    lowerBody.forEach(m => m.rotation = [0, 0, 0, 1]);\n                }\n                // convert bones\n                for (let m of vmd.motions) {\n                    if (nameMap[m.boneName]) {\n                        m.boneName = nameMap[m.boneName];\n                    }\n                    let r = rotationOffsets[m.boneName];\n                    if (r) {\n                        m.rotation = rot.fromArray(m.rotation).premultiply(r).toArray();\n                    }\n                    m.position[0] *= scale;\n                    m.position[1] *= scale;\n                    m.position[2] *= scale;\n                    rotY(m.position, [-1, 0]);\n                    rotY(m.rotation, [-1, 0]);\n                    let t = boneTransforms[m.boneName];\n                    if (t) {\n                        rotZ(m.position, t);\n                        rotZ(m.rotation, t);\n                    }\n                }\n\n                if (options.enableIK) {\n                    /** @type {THREE.Bone[]} */\n                    // @ts-ignore\n                    let skeletonBones = vrm.model.skeleton.bones as any[];\n                    let getTargetBone = (config: { target: string, parent?: any, bones: any[] }) => {\n                        let targetIndex = skeletonBones.findIndex(b => b.name == config.target);\n                        if (targetIndex >= 0) {\n                            return targetIndex;\n                        }\n                        let parentObj = config.parent != null ? skeletonBones[getTargetBone(this.ikConfigs[config.parent])] : vrm.model;\n                        let dummyBone = new THREE.Bone();\n                        dummyBone.name = config.target;\n                        skeletonBones.push(dummyBone);\n                        parentObj.add(dummyBone);\n                        parentObj.updateMatrixWorld();\n                        let initPos = vrm.bones[config.bones[0]].getWorldPosition(new THREE.Vector3());\n                        dummyBone.position.copy(initPos.applyMatrix4(parentObj.matrixWorld.clone().invert()));\n\n                        // DEBUG\n                        //let geometry = new THREE.BoxGeometry(0.01, 0.01, 0.01);\n                        //let material = new THREE.MeshBasicMaterial({\n                        //\tcolor: new THREE.Color(\"red\"),\n                        //\ttransparent: true, opacity: 0.4, depthTest: false,\n                        //});\n                        //dummyBone.add(new THREE.Mesh(geometry, material));\n                        return skeletonBones.length - 1;\n                    }\n                    let iks = [];\n                    for (let config of this.ikConfigs) {\n                        // TODO: IK on/off setting from vmd.\n                        if (vmd.motions.find(m => m.boneName == config.target) == undefined) {\n                            continue;\n                        }\n                        let boneIndex = (name: string) => skeletonBones.findIndex(b => b == vrm.bones[name]);\n                        let effectorIndex = boneIndex(config.bones[0]);\n                        if (effectorIndex < 0) {\n                            continue;\n                        }\n                        let links: any[] = [];\n                        config.bones.slice(1).forEach(name => {\n                            let index = boneIndex(name);\n                            if (index >= 0) {\n                                let link: { index: number, rotationMax?: any, rotationMin?: any } = { index: index };\n                                let constraint = this.boneConstraints[name];\n                                if (constraint) {\n                                    link.rotationMax = constraint.max;\n                                    link.rotationMin = constraint.min;\n                                }\n                                links.push(link);\n                            }\n                        });\n                        let ik = {\n                            target: getTargetBone(config),\n                            effector: effectorIndex,\n                            links: links,\n                            maxAngle: 1,\n                            iteration: 4,\n                        };\n                        iks.push(ik);\n                    }\n                    if (iks.length > 0) {\n                        console.log(iks);\n                        let ikSolver = new CCDIKSolver(vrm.model, iks);\n                        vrm.setModule('MMDIK', { update: (t) => ikSolver.update() });\n                    }\n                }\n\n                let clip = loader.animationBuilder.build(vmd, vrm.model) as THREE.AnimationClip;\n                clip.tracks.forEach(tr => {\n                    let m = tr.name.match(/.morphTargetInfluences\\[(\\w+)\\]/);\n                    if (m) {\n                        let b = vrm.blendShapes[m[1]];\n                        if (b && b.binds.length > 0) {\n                            // todo clone track.\n                            tr.name = b.binds[0].target.uuid + \".morphTargetInfluences[\" + b.binds[0].index + \"]\";\n                        }\n                    }\n                });\n                resolve(clip);\n            }, () => { }, reject);\n        });\n    }\n}\n", "import { VRMAvatar } from  '../vrm/avatar';\nimport { BVHLoader } from 'three/examples/jsm/loaders/BVHLoader.js'\n\nexport class BVHLoaderWrapper {\n    public async load(url: string, avatar: VRMAvatar, options: any): Promise<THREE.AnimationClip> {\n        /** @ts-ignore */\n        return await new Promise((resolve, reject) => {\n            new BVHLoader().load(url, (result: any) => {\n                if (options.convertBone) {\n                    this.fixTrackName(result.clip, avatar);\n                }\n                result.clip.tracks = result.clip.tracks.filter((t: any) => !t.name.match(/position/) || t.name.match(avatar.bones.hips.name));\n                resolve(result.clip);\n            });\n        });\n    }\n\n    protected convertBoneName(name: string): string {\n        name = name.replace('Spin1', 'Spin');\n        name = name.replace('Chest1', 'Chest');\n        name = name.replace('Chest2', 'UpperChest');\n        name = name.replace('UpLeg', 'UpperLeg');\n        name = name.replace('LeftLeg', 'LeftLowerLeg');\n        name = name.replace('RightLeg', 'RightLowerLeg');\n        name = name.replace('ForeArm', 'UpperArm');\n        name = name.replace('LeftArm', 'LeftLowerArm');\n        name = name.replace('RightArm', 'RightLowerArm');\n        name = name.replace('Collar', 'Shoulder');\n        name = name.replace('Elbow', 'LowerArm');\n        name = name.replace('Wrist', 'Hand');\n        name = name.replace('LeftHip', 'LeftUpperLeg');\n        name = name.replace('RightHip', 'RightUpperLeg');\n        name = name.replace('Knee', 'LowerLeg');\n        name = name.replace('Ankle', 'Foot');\n        return name.charAt(0).toLowerCase() + name.slice(1);\n    }\n\n    protected fixTrackName(clip: THREE.AnimationClip, avatar: VRMAvatar): void {\n        clip.tracks.forEach(t => {\n            // '.bones[Chest].quaternion'\n            t.name = t.name.replace(/bones\\[(\\w+)\\]/, (m, name) => {\n                let bone = avatar.bones[this.convertBoneName(name)];\n                return 'bones[' + (bone != null ? bone.name : 'NODE_NOT_FOUND') + ']';\n            });\n            t.name = t.name.replace('ToeBase', 'Foot');\n            if (t.name.match(/quaternion/)) {\n                t.values = t.values.map((v, i) => i % 2 === 0 ? -v : v);\n            }\n            if (t.name.match(/position/)) {\n                t.values = t.values.map((v, i) => (i % 3 === 1 ? v : -v) * 0.09); // TODO\n            }\n        });\n        clip.tracks = clip.tracks.filter(t => !t.name.match(/NODE_NOT_FOUND/));\n    }\n}\n", "// @ts-nocheck\nimport { VRMAvatar, VRMLoader } from \"./vrm/avatar\";\nimport { VRMPhysicsCannonJS } from \"./utils/physics-cannon\";\nimport { IKNode, IKSolver } from \"./utils/simpleik\";\nimport { VMDLoaderWrapper } from \"./utils/vmd\";\nimport { BVHLoaderWrapper } from \"./utils/bvh\";\n\nAFRAME.registerComponent('vrm', {\n    schema: {\n        src: { default: '' },\n        firstPerson: { default: false },\n        blink: { default: true },\n        blinkInterval: { default: 5 },\n        lookAt: { type: 'selector' },\n        enablePhysics: { default: false },\n    },\n    init() {\n        this.avatar = null;\n    },\n    update(oldData) {\n        if (this.data.src !== oldData.src) {\n            this.remove();\n            this._loadAvatar();\n        }\n        this._updateAvatar();\n    },\n    tick(time, timeDelta) {\n        if (!this.avatar) {\n            this.pause();\n            return;\n        }\n        this.avatar.update(timeDelta / 1000);\n    },\n    remove() {\n        if (this.avatar) {\n            this.el.removeObject3D('avatar');\n            this.avatar.dispose();\n        }\n    },\n    async _loadAvatar() {\n        let el = this.el;\n        let url = this.data.src;\n        if (!url) {\n            return;\n        }\n        try {\n            let moduleSpecs = [];\n            if (globalThis.CANNON) {\n                moduleSpecs.push({ name: 'physics', instantiate: (a, ctx) => new VRMPhysicsCannonJS(ctx) });\n            }\n            let avatar = await new VRMLoader().load(url, moduleSpecs);\n            if (url != this.data.src) {\n                avatar.dispose();\n                return;\n            }\n            this.avatar = avatar;\n            el.setObject3D('avatar', avatar.model);\n            this._updateAvatar();\n            this.play();\n            el.emit('model-loaded', { format: 'vrm', model: avatar.model, avatar: avatar }, false);\n        } catch (e) {\n            el.emit('model-error', { format: 'vrm', src: url, cause: e }, false);\n        }\n    },\n    _updateAvatar() {\n        if (!this.avatar) {\n            return;\n        }\n        let data = this.data;\n        this.avatar.setFirstPerson(data.firstPerson);\n        if (data.lookAt) {\n            if (data.lookAt.tagName == 'A-CAMERA') {\n                this.avatar.lookAtTarget = this.el.sceneEl.camera;\n            } else {\n                this.avatar.lookAtTarget = data.lookAt.object3D;\n            }\n        } else {\n            this.avatar.lookAtTarget = null;\n        }\n        if (data.blink) {\n            this.avatar.startBlink(data.blinkInterval);\n        } else {\n            this.avatar.stopBlink();\n        }\n        /** @type {VRMPhysicsCannonJS} */\n        let physics = this.avatar.modules.physics;\n        if (physics) {\n            if (data.enablePhysics && physics.world == null) {\n                let engine = this.el.sceneEl.systems.physics;\n                // @ts-ignore\n                physics.attach(engine && engine.driver && engine.driver.world);\n            }\n            physics.enable = data.enablePhysics;\n        }\n    }\n});\n\nAFRAME.registerComponent('vrm-anim', {\n    schema: {\n        src: { default: '' },\n        format: { default: '' },\n        loop: { default: true },\n        enableIK: { default: true },\n        convertBone: { default: true },\n    },\n    init() {\n        /** @type {VRMAvatar} */\n        this.avatar = null;\n        if (this.el.components.vrm && this.el.components.vrm.avatar) {\n            this.avatar = this.el.components.vrm.avatar;\n        }\n        this.onVrmLoaded = (ev) => {\n            this.avatar = ev.detail.avatar;\n            if (this.data.src != '') {\n                this._loadClip(this.data.src);\n            } else if (this.avatar.animations.length > 0) {\n                this.playClip(this.avatar.animations[0]);\n            } else {\n                this.playTestMotion();\n            }\n        };\n        this.el.addEventListener('model-loaded', this.onVrmLoaded);\n    },\n    update(oldData) {\n        if (oldData.src != this.data.src && this.avatar) {\n            this._loadClip(this.data.src);\n        }\n    },\n    /**\n     * \n     * @param {string} url \n     * @returns \n     */\n    async _loadClip(url) {\n        this.stopAnimation();\n        this.avatar.restPose();\n        if (url === '') {\n            return;\n        }\n        let loop = this.data.loop ? THREE.LoopRepeat : THREE.LoopOnce;\n        let format = this.data.format || (url.toLowerCase().endsWith('.bvh') ? 'bvh' : '');\n        let loader = format == 'bvh' ? new BVHLoaderWrapper() : new VMDLoaderWrapper()\n        let clip = await loader.load(url, this.avatar, this.data);\n        if (!this.avatar) {\n            return;\n        }\n        this.playClip(clip);\n    },\n    stopAnimation() {\n        if (this.animation) {\n            this.animation.stop();\n            this.avatar.mixer.uncacheClip(this.clip);\n            this.avatar.removeModule('MMDIK');\n            this.animation = null;\n        }\n    },\n    playTestMotion() {\n        let q = (x, y, z) => new THREE.Quaternion().setFromEuler(new THREE.Euler(x * Math.PI / 180, y * Math.PI / 180, z * Math.PI / 180));\n        let tracks = {\n            leftUpperArm: {\n                keys: [\n                    { rot: q(0, 0, 65), time: 0 },\n                    { rot: q(0, 0, 63), time: 1 },\n                    { rot: q(0, 0, 65), time: 2 },\n                ]\n            },\n            rightUpperArm: {\n                keys: [\n                    { rot: q(0, 0, -65), time: 0 },\n                    { rot: q(0, 0, -60), time: 1 },\n                    { rot: q(0, 0, -65), time: 2 },\n                ]\n            },\n            spine: {\n                keys: [\n                    { rot: q(0, 2, 0), time: 0 },\n                    { rot: q(2, 0, -2), time: 1 },\n                    { rot: q(2, -2, 0), time: 2 },\n                    { rot: q(0, 0, 2), time: 3 },\n                    { rot: q(0, 2, 0), time: 4 },\n                ]\n            }\n        };\n        let clip = THREE.AnimationClip.parseAnimation(\n            {\n                name: 'testAnimation',\n                hierarchy: Object.values(tracks),\n            },\n            Object.keys(tracks).map(k => this.avatar.bones[k] || { name: k })\n        );\n        this.playClip(clip);\n    },\n    playClip(clip) {\n        let loop = this.data.loop ? THREE.LoopRepeat : THREE.LoopOnce;\n        this.stopAnimation();\n        this.clip = clip;\n        this.avatar.mixer.setTime(0);\n        this.animation = this.avatar.mixer.clipAction(clip).setLoop(loop).setEffectiveWeight(1.0).play();\n        this.animation.clampWhenFinished = true;\n    },\n    remove() {\n        this.el.removeEventListener('model-loaded', this.onVrmLoaded);\n        this.stopAnimation();\n        this.avatar = null;\n    }\n});\n\nAFRAME.registerComponent('vrm-skeleton', {\n    schema: {\n        physicsOffset: { type: 'vec3', default: { x: 0, y: 0, z: 0 } },\n    },\n    init() {\n        this.physicsBodies = [];\n        this.sceneObj = this.el.sceneEl.object3D;\n        if (this.el.components.vrm && this.el.components.vrm.avatar) {\n            this._onAvatarUpdated(this.el.components.vrm.avatar);\n        }\n        this.onVrmLoaded = (ev) => this._onAvatarUpdated(ev.detail.avatar);\n        this.el.addEventListener('model-loaded', this.onVrmLoaded);\n    },\n    _onAvatarUpdated(avatar) {\n        if (this.helper) {\n            this.sceneObj.remove(this.helper);\n        }\n        this.helper = new THREE.SkeletonHelper(avatar.model);\n        this.sceneObj.add(this.helper);\n        this._updatePhysicsBody(avatar);\n    },\n    _updatePhysicsBody(avatar) {\n        this._clearPhysicsBody();\n        /** @type {VRMPhysicsCannonJS} */\n        let physics = avatar.modules.physics;\n        if (!physics || !physics.world) {\n            return;\n        }\n        let geometry = new THREE.SphereGeometry(1, 6, 3);\n        let material = new THREE.MeshBasicMaterial({ color: new THREE.Color(\"red\"), wireframe: true, depthTest: false });\n        physics.bodies.forEach(body => {\n            let obj = new THREE.Group();\n            body.shapes.forEach((shape, i) => {\n                let sphere = new THREE.Mesh(geometry, material);\n                sphere.position.copy(body.shapeOffsets[i]);\n                sphere.scale.multiplyScalar(shape.boundingSphereRadius || 0.01);\n                obj.add(sphere);\n\n            });\n            this.sceneObj.add(obj);\n            this.physicsBodies.push([body, obj]);\n        });\n    },\n    _clearPhysicsBody() {\n        this.physicsBodies.forEach(([body, obj]) => obj.parent.remove(obj));\n        this.physicsBodies = [];\n    },\n    tick() {\n        this.physicsBodies.forEach(([body, obj]) => {\n            obj.position.copy(body.position).add(this.data.physicsOffset);\n            obj.quaternion.copy(body.quaternion);\n        });\n    },\n    remove() {\n        this.el.removeEventListener('model-loaded', this.onVrmLoaded);\n        this._clearPhysicsBody();\n        if (this.helper) {\n            this.sceneObj.remove(this.helper);\n        }\n    }\n});\n\nAFRAME.registerComponent('vrm-poser', {\n    schema: {\n        color: { default: '#00ff00' },\n        enableConstraints: { default: true },\n    },\n    init() {\n        this.binds = [];\n        this._tmpV0 = new THREE.Vector3();\n        this._tmpV1 = new THREE.Vector3();\n        this._tmpQ0 = new THREE.Quaternion();\n        this._tmpQ1 = new THREE.Quaternion();\n        this._tmpM0 = new THREE.Matrix4();\n        if (this.el.components.vrm && this.el.components.vrm.avatar) {\n            this._onAvatarUpdated(this.el.components.vrm.avatar);\n        }\n        this.onVrmLoaded = (ev) => this._onAvatarUpdated(ev.detail.avatar);\n        this.el.addEventListener('model-loaded', this.onVrmLoaded);\n    },\n    remove() {\n        this.el.removeEventListener('model-loaded', this.onVrmLoaded);\n        this._removeHandles();\n    },\n    getPoseData(exportMorph) {\n        if (!this.avatar) {\n            return;\n        }\n        return this.avatar.getPose(exportMorph);\n    },\n    setPoseData(pose) {\n        if (!this.avatar) {\n            return;\n        }\n        this.avatar.setPose(pose);\n        this._updateHandlePosition();\n    },\n    _onAvatarUpdated(avatar) {\n        this._removeHandles();\n        this.avatar = avatar;\n        let geometry = new THREE.BoxGeometry(1, 1, 1);\n        let material = new THREE.MeshBasicMaterial({\n            color: new THREE.Color(this.data.color),\n            transparent: true, opacity: 0.4, depthTest: false,\n        });\n        let _v0 = this._tmpV0, _v1 = this._tmpV1, _m = this._tmpM0, _q = this._tmpQ0;\n        let rootNode = avatar.bones['hips'];\n        let boneNameByUUID = {};\n        for (let name of Object.keys(avatar.bones)) {\n            let bone = avatar.bones[name];\n            let isRoot = bone == rootNode;\n            let cube = new THREE.Mesh(geometry, material);\n            let targetEl = document.createElement('a-entity');\n            targetEl.classList.add('collidable');\n            targetEl.setAttribute('xy-drag-control', {});\n            targetEl.setObject3D('handle', cube);\n            let targetObject = targetEl.object3D;\n            let minDist = bone.children.reduce((d, b) => Math.min(d, b.position.length()), bone.position.length());\n            targetObject.scale.multiplyScalar(Math.max(Math.min(minDist / 2, 0.05), 0.01));\n            boneNameByUUID[bone.uuid] = name;\n            targetEl.addEventListener('mousedown', ev => {\n                this.el.emit('vrm-poser-select', { name: name, node: bone });\n            });\n            let parentBone = bone.parent;\n            while (!boneNameByUUID[parentBone.uuid] && parentBone.parent && parentBone.parent.isBone) {\n                parentBone = parentBone.parent;\n            }\n            targetEl.addEventListener('xy-drag', ev => {\n                if (isRoot) {\n                    // TODO\n                    let d = targetObject.parent.worldToLocal(bone.getWorldPosition(_v0)).sub(targetObject.position)\n                    avatar.model.position.sub(d);\n                }\n                parentBone.updateMatrixWorld(false);\n                targetObject.updateMatrixWorld(false);\n                _m.getInverse(parentBone.matrixWorld).multiply(targetObject.matrixWorld).decompose(_v1, _q, _v0);\n                bone.quaternion.copy(this._applyConstraintQ(name, _q));\n                _q.setFromUnitVectors(_v0.copy(bone.position).normalize(), _v1.normalize());\n                if (parentBone.children.length == 1) {\n                    parentBone.quaternion.multiply(_q);\n                    this._applyConstraintQ(boneNameByUUID[parentBone.uuid], parentBone.quaternion)\n                }\n                this._updateHandlePosition(isRoot ? null : bone);\n            });\n            targetEl.addEventListener('xy-dragend', ev => {\n                this._updateHandlePosition();\n                console.log(parentBone.name, name);\n            });\n            this.el.appendChild(targetEl);\n            this.binds.push([bone, targetObject]);\n        }\n        this._updateHandlePosition();\n    },\n    _applyConstraintQ(name, q) {\n        if (!this.data.enableConstraints) {\n            return q;\n        }\n        let _q = this._tmpQ1, _v = this._tmpV0;\n        let constraint = this.avatar.boneConstraints[name];\n        if (constraint && constraint.type == 'ball') {\n            let angle = 2 * Math.acos(q.w);\n            if (constraint.twistAxis) {\n                let tangle = angle * Math.acos(q.w) * _v.copy(q).normalize().dot(constraint.twistAxis); // TODO\n                tangle = this._normalizeAngle(tangle);\n                if (Math.abs(tangle) > constraint.twistLimit) {\n                    let e = tangle < 0 ? (tangle + constraint.twistLimit) : (tangle - constraint.twistLimit);\n                    q.multiply(_q.setFromAxisAngle(constraint.twistAxis, -e));\n                    angle = 2 * Math.acos(q.w);\n                }\n            }\n            if (Math.abs(this._normalizeAngle(angle)) > constraint.limit) {\n                q.setFromAxisAngle(_v.copy(q).normalize(), constraint.limit);\n            }\n        } else if (constraint && constraint.type == 'hinge') {\n            let m = (constraint.min + constraint.max) / 2;\n            let angle = 2 * Math.acos(q.w) * _v.copy(q).normalize().dot(constraint.axis); // TODO\n            angle = THREE.MathUtils.clamp(this._normalizeAngle(angle - m), constraint.min - m, constraint.max - m);\n            q.setFromAxisAngle(constraint.axis, angle + m);\n        }\n        return q;\n    },\n    _normalizeAngle(angle) {\n        return angle - Math.PI * 2 * Math.floor((angle + Math.PI) / (Math.PI * 2));\n    },\n    _removeHandles() {\n        this.binds.forEach(([b, t]) => {\n            this.el.removeChild(t.el);\n            let obj = t.el.getObject3D('handle');\n            if (obj) {\n                obj.material.dispose();\n                obj.geometry.dispose();\n            }\n            t.el.destroy();\n        });\n        this.binds = [];\n    },\n    _updateHandlePosition(skipNode) {\n        let _v = this._tmpV0;\n        let container = this.el.object3D;\n        container.updateMatrixWorld(false);\n        let base = container.matrixWorld.clone().invert();\n        this.binds.forEach(([node, target]) => {\n            let pos = node == skipNode ? _v : target.position;\n            node.updateMatrixWorld(false);\n            target.matrix.copy(node.matrixWorld).premultiply(base).decompose(pos, target.quaternion, _v);\n        });\n    }\n});\n\nAFRAME.registerComponent('vrm-mimic', {\n    schema: {\n        leftHandTarget: { type: 'selector', default: '' },\n        leftHandOffsetPosition: { type: 'vec3' },\n        leftHandOffsetRotation: { type: 'vec3', default: { x: 0, y: -Math.PI / 2, z: 0 } },\n        rightHandTarget: { type: 'selector', default: '' },\n        rightHandOffsetPosition: { type: 'vec3' },\n        rightHandOffsetRotation: { type: 'vec3', default: { x: 0, y: Math.PI / 2, z: 0 } },\n        leftLegTarget: { type: 'selector', default: '' },\n        rightLegTarget: { type: 'selector', default: '' },\n        headTarget: { type: 'selector', default: '' },\n        avatarOffset: { type: 'vec3', default: { x: 0, y: 0, z: 0 } },\n    },\n    init() {\n        this._tmpV0 = new THREE.Vector3();\n        this._tmpV1 = new THREE.Vector3();\n        this._tmpQ0 = new THREE.Quaternion();\n        this._tmpQ1 = new THREE.Quaternion();\n        this._tmpM0 = new THREE.Matrix4();\n        this.targetEls = [];\n        if (this.el.components.vrm && this.el.components.vrm.avatar) {\n            this._onAvatarUpdated(this.el.components.vrm.avatar);\n        }\n        this.onVrmLoaded = (ev) => this._onAvatarUpdated(ev.detail.avatar);\n        this.el.addEventListener('model-loaded', this.onVrmLoaded);\n    },\n    update() {\n        if (this.data.headTarget) {\n            if (this.data.headTarget.tagName == 'A-CAMERA') {\n                this.headTarget = this.el.sceneEl.camera;\n            } else {\n                this.headTarget = this.data.headTarget.object3D;\n            }\n        } else {\n            this.headTarget = null;\n        }\n\n        this.rightHandOffset = new THREE.Matrix4().compose(\n            this.data.rightHandOffsetPosition,\n            new THREE.Quaternion().setFromEuler(new THREE.Euler().setFromVector3(this.data.rightHandOffsetRotation)),\n            new THREE.Vector3(1, 1, 1));\n        this.leftHandOffset = new THREE.Matrix4().compose(\n            this.data.leftHandOffsetPosition,\n            new THREE.Quaternion().setFromEuler(new THREE.Euler().setFromVector3(this.data.leftHandOffsetRotation)),\n            new THREE.Vector3(1, 1, 1));\n    },\n    _onAvatarUpdated(avatar) {\n        this.avatar = avatar;\n        for (let el of this.targetEls) {\n            this.el.removeChild(el);\n        }\n        this.targetEls = [];\n        this.update();\n        this.startAvatarIK_simpleIK(avatar);\n    },\n    startAvatarIK_simpleIK(avatar) {\n        let solver = new IKSolver();\n        this.qbinds = [];\n        let setupIkChain = (boneNames, targetEl, offset) => {\n            if (targetEl == null) {\n                targetEl = document.createElement('a-box');\n                targetEl.classList.add('collidable');\n                targetEl.setAttribute('xy-drag-control', {});\n                targetEl.setAttribute('geometry', { width: 0.05, depth: 0.05, height: 0.05 });\n                targetEl.setAttribute('material', { color: 'blue', depthTest: false, transparent: true, opacity: 0.4 });\n                this.el.appendChild(targetEl);\n                this.targetEls.push(targetEl);\n            }\n            let pos = (b, p) => p.worldToLocal(b.getWorldPosition(new THREE.Vector3()));\n            boneNames = boneNames.filter(name => avatar.bones[name]);\n            let boneList = boneNames.map(name => avatar.bones[name]);\n            let bones = boneList.map((b, i) => {\n                let position = i == 0 ? b.position : pos(b, boneList[i - 1]);\n                let constraintConf = avatar.boneConstraints[boneNames[i]];\n                let constraint = constraintConf ? {\n                    apply: ikbone => {\n                        return this._applyConstraintQ(constraintConf, ikbone.quaternion);\n                    }\n                } : null;\n                return new IKNode(position, constraint, b);\n            });\n            this.qbinds.push([boneList[boneList.length - 1], targetEl.object3D, offset]);\n            return { root: boneList[0], ikbones: bones, bones: boneList, target: targetEl.object3D };\n        };\n\n        this.chains = [\n            setupIkChain(['leftUpperArm', 'leftLowerArm', 'leftHand'], this.data.leftHandTarget, this.leftHandOffset),\n            setupIkChain(['rightUpperArm', 'rightLowerArm', 'rightHand'], this.data.rightHandTarget, this.rightHandOffset),\n            setupIkChain(['leftUpperLeg', 'leftLowerLeg', 'leftFoot'], this.data.leftLegTarget),\n            setupIkChain(['rightUpperLeg', 'rightLowerLeg', 'rightFoot'], this.data.rightLegTarget),\n        ];\n\n        this.simpleIK = solver;\n    },\n    _applyConstraintQ(constraint, q) {\n        let _q = this._tmpQ1, _v = this._tmpV0, fixed = false;;\n        if (constraint && constraint.type == 'ball') {\n            let angle = 2 * Math.acos(q.w);\n            if (constraint.twistAxis) {\n                let tangle = angle * Math.acos(q.w) * _v.copy(q).normalize().dot(constraint.twistAxis); // TODO\n                tangle = this._normalizeAngle(tangle);\n                if (Math.abs(tangle) > constraint.twistLimit) {\n                    let e = tangle < 0 ? (tangle + constraint.twistLimit) : (tangle - constraint.twistLimit);\n                    q.multiply(_q.setFromAxisAngle(constraint.twistAxis, -e));\n                    angle = 2 * Math.acos(q.w);\n                    fixed = true;\n                }\n            }\n            if (Math.abs(this._normalizeAngle(angle)) > constraint.limit) {\n                q.setFromAxisAngle(_v.copy(q).normalize(), constraint.limit);\n                fixed = true;\n            }\n        } else if (constraint && constraint.type == 'hinge') {\n            let m = (constraint.min + constraint.max) / 2;\n            let dot = _v.copy(q).normalize().dot(constraint.axis);\n            let angle = 2 * Math.acos(q.w) * dot; // TODO\n            angle = THREE.MathUtils.clamp(this._normalizeAngle(angle - m), constraint.min - m, constraint.max - m);\n            q.setFromAxisAngle(constraint.axis, angle + m);\n            fixed = true;\n        }\n        return fixed;\n    },\n    _normalizeAngle(angle) {\n        return angle - Math.PI * 2 * Math.floor((angle + Math.PI) / (Math.PI * 2));\n    },\n    tick(time, timeDelta) {\n        if (!this.avatar) {\n            return;\n        }\n        if (this.headTarget) {\n            let position = this._tmpV0;\n            let headRot = this._tmpQ0;\n            this.headTarget.matrixWorld.decompose(position, headRot, this._tmpV1)\n            position.y = 0;\n            this.avatar.model.position.copy(position.add(this.data.avatarOffset));\n            let head = this.avatar.firstPersonBone;\n            if (head) {\n                let r = this._tmpQ1.setFromRotationMatrix(head.parent.matrixWorld).invert();\n                head.quaternion.copy(headRot.premultiply(r));\n            }\n        }\n        if (this.simpleIK) {\n            let pm = this.el.object3D.matrixWorld.clone().invert();\n            for (let chain of this.chains) {\n                // TODO: add chain.root.position\n                let baseMat = chain.root.parent.matrixWorld.clone().premultiply(pm);\n                if (this.simpleIK.solve(chain.ikbones, chain.target.position, baseMat) || true) {\n                    chain.ikbones.forEach((ikbone, i) => {\n                        if (i == chain.ikbones.length - 1) return;\n                        let a = ikbone.userData.quaternion.angleTo(ikbone.quaternion);\n                        if (a > 0.2) {\n                            ikbone.userData.quaternion.slerp(ikbone.quaternion, 0.2 / a);\n                        } else {\n                            ikbone.userData.quaternion.copy(ikbone.quaternion);\n                        }\n                    });\n\n                }\n            }\n            this.qbinds.forEach(([bone, t, offset]) => {\n                let m = offset ? t.matrixWorld.clone().multiply(offset) : t.matrixWorld;\n                let r = this._tmpQ0.setFromRotationMatrix(bone.parent.matrixWorld).invert();\n                bone.quaternion.copy(this._tmpQ1.setFromRotationMatrix(m).premultiply(r));\n            });\n        }\n    },\n    remove() {\n        this.el.removeEventListener('model-loaded', this.onVrmLoaded);\n        for (let el of this.targetEls) {\n            this.el.removeChild(el);\n        }\n    }\n});\n"],
  "mappings": "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",
  "names": []
}
